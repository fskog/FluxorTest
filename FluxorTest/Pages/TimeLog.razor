@page "/log"
@using Blazor.Fluxor
@using Store.TimeLog
@using Store.Category
@inject IState<TimeLogState> TimeLogState
@inject IState<CategoryState> CategoryState
@inject IDispatcher Dispatcher
@inherits Blazor.Fluxor.Components.FluxorComponent


<h3>Time log</h3>

@*<div class="mt-3 mb-3">

        <MiniDayPicker Amount="3" OnValueChanged=@HandleDaySelection IncludeAll=true />
    </div>*@

<div class="list-group mb-5">
    @*@if (timeLogItems == null)
        {
            <div>
                Loading...
            </div>
        }
        else
        {
            if (!timeLogItems.Any())
            {

                <a href="#" class="list-group-item list-group-item-action flex-column align-items-start">
                    <div class="d-flex w-100 justify-content-between">
                        <h5 class="mb-1">Nothing here yet</h5>
                        <small></small>
                    </div>
                    <p class="mb-1">
                        This is where you will see a list of your past times.
                        They will be added here after you stop a timer.
                    </p>
                </a>
            }
            else
            {*@
    @foreach (var time in GetFilteredTimeLog())
    {
        var daysAgo = (DateTime.Now - time.StartTime).Days;
        var daysAgoString = daysAgo == 0 ? "Today" : daysAgo == 1 ? "Yesterday" : $"{daysAgo} days ago";
        var elapsed = (time.EndTime - time.StartTime);
        var elapsedFormatted = elapsed.ToString((elapsed.Hours > 0 ? "hh' h '" : "") + (elapsed.Minutes > 0 ? "m' min '" : "") + "s' sec '");
        <a @key=time.SystemId href="#" @onclick:preventDefault class="mb-2 list-group-item list-group-item-action list-group-item-info flex-column align-items-start">
            <div class="d-flex w-100 justify-content-between">
                <h5 class="mb-1">
                    <span class="badge badge-primary badge-pill">@elapsedFormatted</span>
                    @time.Title
                </h5>
                <small>@daysAgoString</small>
            </div>
            <span class="badge badge-pill badge-light">@GetCategoryTitle(time.CategorySystemId)</span>
            <small>From @time.StartTime.ToString("t") @time.StartTime.ToString("M")</small>
            <small>Until @time.EndTime.ToString("t") @time.EndTime.ToString("M")</small>
        </a>
    }
    @*}
        }*@

    <button class="btn btn-success mb-3 col-sm-12 col-md-2" @onclick=ShowMore>More</button>
</div>


@code {
    int itemsPerPage = 5;
    int currentPageNumber = 1;


    private void ShowMore()
    {
        currentPageNumber++;
        StateHasChanged();
    }

    private string GetCategoryTitle(Guid systemId)
    {
        return CategoryState.Value.GetCategory(systemId).Name;
     
    }

    private List<Models.Timer> GetFilteredTimeLog()
    {
        return TimeLogState.Value.TimeLog.OrderByDescending(x => x.StartTime)
            .Take(currentPageNumber * itemsPerPage)
            .ToList();

    }
}